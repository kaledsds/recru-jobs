import { LayoutDashboard } from "lucide-react";
import Head from "next/head";
import { useEffect, useState } from "react";
import { JobCard } from "~/components/candidate/dashboard";
import { Footer, PageHeader } from "~/components/ui";
import CandidateLayout from "~/layouts/candidate-layout";
import { useInView } from "react-intersection-observer";
import { api } from "~/utils/api";

/**
 * The Candidate page.
 */
export default function Candidate() {
  // search state
  const [searchValue, setSearchValue] = useState<string>("");
  // job type state
  const [jobType, setJobType] = useState<string>("All");
  // experience state
  const [experience, setExperience] = useState<string>("All");

  // jobs query
  const {
    data: jobs,
    fetchNextPage,
    hasNextPage,
    isFetching,
  } = api.job.getjobs.useInfiniteQuery(
    {
      limit: 3,
      searchValue,
      jobType,
      experience,
    },
    { getNextPageParam: (lastPage) => lastPage.nextCursor }
  );

  const { ref, inView } = useInView({ threshold: 0 });

  useEffect(() => {
    if (inView && !isFetching && hasNextPage) {
      void fetchNextPage();
    }
  }, [inView, isFetching, hasNextPage, fetchNextPage]);

  return (
    <>
      <Head>
        <title>RecruJobs/Candidate</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CandidateLayout>
        <div className="container">
          <PageHeader title="Dashboard" Icon={LayoutDashboard}>
            <div className="input-group w-full ">
              <input
                onChange={(e) => setSearchValue(e.target.value)}
                value={searchValue}
                type="text"
                placeholder="Searchâ€¦"
                className="input-bordered input w-full border-r-0 border-neutral-content focus:outline-none"
              />
              <button className="btn-square btn border-l-0 border-neutral-content bg-transparent hover:border-neutral-content hover:bg-transparent">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </button>
            </div>
          </PageHeader>
          <div className="flex">
            <div className="container rounded-box w-[70%] space-y-4 bg-base-300 p-8">
              <p className="text:sm italic text-slate-500">
                NOTE: Enhance your job hunting strategy with our advanced search
                bar and comprehensive filter section. Find your ideal job by
                customizing your search based on keywords, location, industry,
                and more.
              </p>
              {jobs?.pages
                .flatMap((page) => page.jobs)
                .map((job) => (
                  <JobCard job={job} key={job.id} />
                ))}
              <div ref={ref}></div>
            </div>
            <div className="container w-[30%]">
              <div className="h-full space-y-4 p-4  pt-0">
                <div className="card rounded-box grid bg-base-300 px-4 py-4">
                  <div className="flex flex-col space-y-2">
                    <h1 className="text-xl font-bold">Filtter :</h1>
                    <div className="container">
                      <div className="container flex flex-col gap-1.5 p-0">
                        <label className="pl-1" htmlFor="gigType">
                          Job Type :
                        </label>
                        <select
                          value={jobType}
                          onChange={(e) => setJobType(e.target.value)}
                          id="gigType"
                          className="select-primary select w-full"
                        >
                          <option>All</option>
                          <option>Full Time</option>
                          <option>Half Time</option>
                          <option>Freelance</option>
                          <option>Temporary</option>
                        </select>
                      </div>
                      <div className="container flex flex-col gap-1.5 p-0">
                        <label className="pl-1" htmlFor="category">
                          Years Of Experience :
                        </label>
                        <select
                          value={experience}
                          onChange={(e) => setExperience(e.target.value)}
                          id="category"
                          className="select-primary select w-full"
                        >
                          <option>All</option>
                          <option>Less then one year</option>
                          <option>1 year</option>
                          <option>2 years</option>
                          <option>3 years</option>
                          <option>4 years</option>
                          <option>5 years plus</option>
                        </select>
                      </div>
                      <div className="divider"></div>
                      <div className="container flex justify-center p-0 pb-2">
                        <button className="btn-primary btn-sm btn">Find</button>
                      </div>
                    </div>
                  </div>
                </div>
                <Footer />
              </div>
            </div>
          </div>
        </div>
      </CandidateLayout>
    </>
  );
}

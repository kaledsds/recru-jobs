import { zodResolver } from "@hookform/resolvers/zod";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { Spinner, ThemeApplyer } from "~/components/ui";
import {
  FormSteps,
  CandidateInfo,
  CandidateContact,
  CandidateLocation,
  CandidateSocials,
  CandidateDone,
  CandidateResume,
} from "~/components/candidate/become-a-candidate";
import type {
  CandidateContactType,
  CandidateInfoType,
  CandidateLocationType,
  CandidateSocialsType,
} from "~/validation/candidate";
import {
  candidateContactSchema,
  candidateInfoSchema,
  candidateLocationSchema,
  candidateSocialsSchema,
} from "~/validation/candidate";
import { api } from "~/utils/api";
import { useRouter } from "next/navigation";

/**
 * Become a candidate page.
 */
const BecomeACandidate = () => {
  const { data: checkCandidate, status } =
    api.candidate.checkCandidate.useQuery();
  const router = useRouter();
  useEffect(() => {
    if (checkCandidate && status === "success") {
      router.push("/candidate");
    }
  }, [checkCandidate, router, status]);

  const [currentStep, setCurrentStep] = useState<number>(1);

  /**
   * Candidate Info
   */
  const candidateInfoFormMethods = useForm<CandidateInfoType>({
    resolver: zodResolver(candidateInfoSchema),
  });
  const [candidateInfoData, setCandidateInfoData] =
    useState<CandidateInfoType>();

  /**
   * Candidate Contact
   */
  const candidateContactFormMethods = useForm<CandidateContactType>({
    resolver: zodResolver(candidateContactSchema),
  });
  const [candidateContactData, setCandidateContactData] =
    useState<CandidateContactType>();

  /**
   * Candidate Location
   */
  const candidateLocationFormMethods = useForm<CandidateLocationType>({
    resolver: zodResolver(candidateLocationSchema),
  });
  const [candidateLocationData, setCandidateLocationData] =
    useState<CandidateLocationType>();

  /**
   * Candidate Socials
   */
  const candidateSocialsFormMethods = useForm<CandidateSocialsType>({
    resolver: zodResolver(candidateSocialsSchema),
  });
  const [candidateSocialsData, setCandidateSocialsData] =
    useState<CandidateSocialsType>();

  /**
   * Candidate Resume
   */
  const [candidateResumeUrl, setCandidateResumeUrl] = useState<string>();

  // createCandidate Mutation
  const createCandidateMutation = api.candidate.createCandidate.useMutation({
    onSuccess: () => router.push("/candidate"),
  });

  /**
   * Submit the candidate data
   */
  const submitCandidateData = () => {
    if (
      candidateInfoData &&
      candidateContactData &&
      candidateLocationData &&
      candidateSocialsData &&
      candidateResumeUrl
    ) {
      createCandidateMutation.mutate({
        ...candidateInfoData,
        ...candidateContactData,
        ...candidateLocationData,
        ...candidateSocialsData,
        resume: candidateResumeUrl,
      });
    }
  };

  if (status === "loading" || checkCandidate) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>RecruJobs/Welcome</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex h-screen w-screen items-center justify-center overflow-hidden ">
        <div className="space-y-8">
          {/* Form Page Title */}
          <h1 className="text-center text-4xl font-bold text-primary">
            Become a candidate
          </h1>
          {/* Form Steps */}
          <div className="flex w-full justify-center">
            <FormSteps step={currentStep} />
          </div>
          <div className="rounded-lg bg-primary bg-opacity-5 p-10">
            {/* Step 1: CandidateInfo */}
            {currentStep === 1 && (
              <CandidateInfo
                methods={candidateInfoFormMethods}
                submitData={(data: CandidateInfoType) => {
                  setCandidateInfoData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 2: Contact */}
            {currentStep === 2 && (
              <CandidateContact
                methods={candidateContactFormMethods}
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitData={(data: CandidateContactType) => {
                  setCandidateContactData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 3: Location */}

            {currentStep === 3 && (
              <CandidateLocation
                methods={candidateLocationFormMethods}
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitData={(data: CandidateLocationType) => {
                  setCandidateLocationData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 4: Socials */}
            {currentStep === 4 && (
              <CandidateSocials
                methods={candidateSocialsFormMethods}
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitData={(data: CandidateSocialsType) => {
                  setCandidateSocialsData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 5: Resume */}
            {currentStep === 5 && (
              <CandidateResume
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitData={(data: string) => {
                  setCandidateResumeUrl(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 6: Done Submit data */}
            {currentStep === 6 && (
              <CandidateDone
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitCandidateData={submitCandidateData}
              />
            )}
          </div>
        </div>
        <ThemeApplyer />
      </main>
    </>
  );
};

export default BecomeACandidate;

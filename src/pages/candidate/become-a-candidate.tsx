import { zodResolver } from '@hookform/resolvers/zod';
import Head from 'next/head';
import React, { useState } from 'react'
import { useForm } from 'react-hook-form';
import { 
  FormSteps,
  CandidateInfo,
} from '~/components/candidate/become-a-candidate';
import { ThemeApplyer } from '~/components/ui';
import {type CandidateInfoType, candidateSchema } from '~/validation/candidate/candidateInfo';

const BecomeACandidate = () => {
  const [currentStep, setCurrentStep] = useState<number>(1);

    /**
   * Candidate Info
   */
    const candidateInfoFormMethods = useForm<CandidateInfoType>({
      resolver: zodResolver(candidateSchema),
    });
    const [candidateInfoData, setCandidateInfoData] =
      useState<CandidateInfoType>();

  return (
    <>
      <Head>
        <title>RecruJobs/Welcome</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex h-screen w-screen items-center justify-center overflow-hidden ">
        <div className="space-y-8">
          {/* Form Page Title */}
          <h1 className="text-center text-4xl font-bold text-primary">
            Become a candidate
          </h1>
          {/* Form Steps */}
          <div className="flex w-full justify-center">
            <FormSteps step={currentStep} />
          </div>
          <div className="rounded-lg bg-primary bg-opacity-5 p-10">
          {currentStep === 1 && (
              <CandidateInfo
                methods={candidateInfoFormMethods}
                submitData={(data: CandidateInfoType) => {
                  setCandidateInfoData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
          </div>
        </div>
        <ThemeApplyer />
      </main>
    </>
  )
}

export default BecomeACandidate
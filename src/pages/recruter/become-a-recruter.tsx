import Head from "next/head";
import { useEffect, useState } from "react";
import {
  RecruterDone,
  RecruterContact,
  RecruterInfo,
  RecruterSocials,
  RecruterType,
} from "~/components/recruter/become-a-recruter";
import FormSteps from "~/components/recruter/become-a-recruter/form-steps";
import { Spinner, ThemeApplyer } from "~/components/ui";
import { useForm } from "react-hook-form";
import {
  recruterTypeSchema,
  type RecruterTypeType,
} from "~/validation/recruter/recruterType";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  type RecruterNonOrgType,
  type RecruterOrgType,
  recruterNonOrgSchema,
  recruterOrgSchema,
} from "~/validation/recruter/recruterInfo";
import {
  type RecruterContactType,
  recruterContactSchema,
} from "~/validation/recruter/recruterContact";
import {
  recruterSocialsSchema,
  type RecruterSocialsType,
} from "~/validation/recruter/recruterSocials";
import { api } from "~/utils/api";
import { useRouter } from "next/navigation";

/**
 * The Become a recruter page.
 */
export default function BecomeARecruter() {
  const { data: checkRecruter, status } = api.recruter.checkRecruter.useQuery();
  const router = useRouter();
  useEffect(() => {
    if (checkRecruter && status === "success") {
      router.push("/recruter");
    }
  }, [checkRecruter, router, status]);

  const [currentStep, setCurrentStep] = useState<number>(1);

  /**
   * Recruter type
   */
  const recruterTypeFormMethods = useForm<RecruterTypeType>({
    resolver: zodResolver(recruterTypeSchema),
  });
  const [recruterTypeData, setRecruterTypeData] = useState<RecruterTypeType>();

  /**
   * Recruter info
   */
  const recruterOrgFormMethods = useForm<RecruterOrgType>({
    resolver: zodResolver(recruterOrgSchema),
  });
  const [recruterOrgData, setRecruterOrgData] = useState<RecruterOrgType>();
  const recruterNonOrgFormMethods = useForm<RecruterNonOrgType>({
    resolver: zodResolver(recruterNonOrgSchema),
  });
  const [recruterNonOrgData, setRecruterNonOrgData] =
    useState<RecruterNonOrgType>();

  /**
   * Recruter Contact
   */
  const recruterContactFormMethods = useForm<RecruterContactType>({
    resolver: zodResolver(recruterContactSchema),
  });
  const [recruterContactData, setRecruterContactData] =
    useState<RecruterContactType>();

  /**
   * Recruter Socials
   */
  const recruterSocialsFormMethods = useForm<RecruterSocialsType>({
    resolver: zodResolver(recruterSocialsSchema),
  });
  const [recruterSocialsData, setRecruterSocialsData] =
    useState<RecruterSocialsType>();

  // createRecruter Mutation
  const createRecruterMutation = api.recruter.createRecruter.useMutation();

  /**
   * Submit the recruter data
   */
  const submitRecruterData = () => {
    if (recruterTypeData) {
      if (recruterTypeData.isOrganization === "Organization") {
        if (recruterOrgData && recruterContactData && recruterSocialsData) {
          createRecruterMutation.mutate({
            isOrganization: true,
            ...recruterOrgData,
            ...recruterContactData,
            ...recruterSocialsData,
          });
        }
      } else {
        if (recruterNonOrgData && recruterContactData && recruterSocialsData) {
          createRecruterMutation.mutate({
            isOrganization: false,
            ...recruterNonOrgData,
            ...recruterContactData,
            ...recruterSocialsData,
          });
        }
      }
    }
  };

  if (status === "loading" || checkRecruter) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>RecruJobs/Welcome</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex h-screen w-screen items-center justify-center overflow-hidden ">
        <div className="space-y-8">
          {/* Form Page Title */}
          <h1 className="text-center text-4xl font-bold text-primary">
            Become a recruter
          </h1>
          {/* Form Steps */}
          <div className="flex w-full justify-center">
            <FormSteps step={currentStep} />
          </div>
          <div className="rounded-lg bg-primary bg-opacity-5 p-10">
            {/* Step 1: Recruter Type */}
            {currentStep === 1 && (
              <RecruterType
                methods={recruterTypeFormMethods}
                submitData={(data: RecruterTypeType) => {
                  setRecruterTypeData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 2: Recruter Info */}
            {currentStep === 2 && (
              <RecruterInfo
                isOrganization={
                  recruterTypeData?.isOrganization === "Organization"
                    ? true
                    : false
                }
                orgMethods={recruterOrgFormMethods}
                nonOrgMethods={recruterNonOrgFormMethods}
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitOrgData={(data: RecruterOrgType) => {
                  setRecruterOrgData(data);
                  setCurrentStep((step) => step + 1);
                }}
                submitNonOrgData={(data: RecruterNonOrgType) => {
                  setRecruterNonOrgData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 3: Recruter Contact */}
            {currentStep === 3 && (
              <RecruterContact
                methods={recruterContactFormMethods}
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitData={(data: RecruterContactType) => {
                  setRecruterContactData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 4: Recruter Socials */}
            {currentStep === 4 && (
              <RecruterSocials
                methods={recruterSocialsFormMethods}
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitData={(data: RecruterSocialsType) => {
                  setRecruterSocialsData(data);
                  setCurrentStep((step) => step + 1);
                }}
              />
            )}
            {/* Step 5: Done Submit data */}
            {currentStep === 5 && (
              <RecruterDone
                goPreviousStep={() => setCurrentStep((step) => step - 1)}
                submitRecruterData={submitRecruterData}
              />
            )}
          </div>
        </div>
        <ThemeApplyer />
      </main>
    </>
  );
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Recruter {
    id             String  @id @default(cuid())
    userId         String  @unique
    user           User    @relation(fields: [userId], references: [id])
    isOrganization Boolean
    orgName        String?
    orgId          String?
    fullName       String?
    cin            String?
    phone          String
    email          String
    city           String
    address        String
    postalCode     String
    linkedIn       String?
    twitter        String?
    facebook       String?
    instagram      String?
    website        String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model candidate {
    id         String   @id @default(cuid())
    userId     String   @unique
    user       User     @relation(fields: [userId], references: [id])
    fullName   String
    cin        String
    expertise  String
    phone      String
    email      String
    city       String
    address    String
    postalCode String
    linkedIn   String?
    twitter    String?
    facebook   String?
    instagram  String?
    github     String?
    website    String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Resume {
    id        String   @id @default(cuid())
    url       String
    owner     User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @unique
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    recruter      Recruter?
    candidate     candidate?
    Resume        Resume?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Recruter {
    id             String  @id @default(cuid())
    userId         String  @unique
    user           User    @relation(fields: [userId], references: [id])
    isOrganization Boolean
    orgName        String?
    orgId          String?
    fullName       String?
    cin            String?
    phone          String
    email          String
    city           String
    address        String
    postalCode     String
    linkedIn       String?
    twitter        String?
    facebook       String?
    instagram      String?
    website        String?
    jobs           Job[]

    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    GigRequest GigRequest[]
    signal     Signal[]
}

model candidate {
    id         String       @id @default(cuid())
    userId     String       @unique
    user       User         @relation(fields: [userId], references: [id])
    fullName   String
    cin        String
    expertise  String
    phone      String
    email      String
    city       String
    address    String
    postalCode String
    linkedIn   String?
    twitter    String?
    facebook   String?
    instagram  String?
    github     String?
    website    String?
    resume     String
    gig        Gig[]
    jobRequest JobRequest[]
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    signal     Signal[]
}

model Job {
    id                String       @id @default(cuid())
    title             String
    description       String
    yearsOfExperience String
    type              String
    salary            String
    hoursofwork       String
    location          String
    recruter          Recruter     @relation(fields: [recruterId], references: [id], onDelete: Cascade)
    recruterId        String
    jobRequest        JobRequest[]
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    signal            Signal[]
    gigRequest        GigRequest[]
}

model Gig {
    id          String       @id @default(cuid())
    title       String
    category    String
    serviceType String
    salary      String
    candidate   candidate    @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    candidateId String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    signal      Signal[]
    gigRequest  GigRequest[]
}

model JobRequest {
    id          String    @id @default(cuid())
    status      String
    candidate   candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    candidateId String
    job         Job       @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
    jobPostId   String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model GigRequest {
    id         String   @id @default(cuid())
    status     String
    recruter   Recruter @relation(fields: [recruterId], references: [id], onDelete: Cascade)
    recruterId String
    job        Job      @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
    jobPostId  String
    gig        Gig      @relation(fields: [gigPostId], references: [id], onDelete: Cascade)
    gigPostId  String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Signal {
    id          String    @id @default(cuid())
    reason      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    candidate   candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    candidateId String
    recruter    Recruter  @relation(fields: [recruterId], references: [id], onDelete: Cascade)
    recruterId  String
    job         Job       @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
    jobPostId   String
    gig         Gig       @relation(fields: [gigPostId], references: [id], onDelete: Cascade)
    gigPostId   String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Feedback {
    id        String   @id @default(cuid())
    content   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model contact {
    id        String   @id @default(cuid())
    fullName  String
    email     String
    subject   String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    recruter      Recruter?
    candidate     candidate?
    signal        Signal[]
    feedback      Feedback[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
